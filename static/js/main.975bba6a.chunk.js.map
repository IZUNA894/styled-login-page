{"version":3,"sources":["components/common/button.js","components/common/pageLayout.js","components/common/header.js","components/common/input.js","components/common/passwordInput.js","components/common/spinner.js","components/common/toggle.js","components/pages/home.js","components/pages/login.js","themes/light.js","themes/dark.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","p","secondry","theme","secondryColor","primaryColor","large","css","propTypes","PropTypes","bool","Content","main","PageLayout","children","Header","HeaderWrapper","header","Menu","nav","open","secondaryColor","backgroundColor","MobileMenuIcon","div","textColor","StyledLink","isActive","props","pathname","useLocation","useState","menuOpen","setMenuOpen","useContext","ThemeContext","id","setTheme","onClick","s","to","Toggle","onToggle","Input","input","PasswordInputWrapper","PasswordInputStyled","attrs","placeholder","ToggleButton","PasswordInput","showPassword","setShowPassword","type","rotation","keyframes","Spinner","ToggleWrapper","Notch","home","Component","Form","form","Login","loading","setLoading","username","password","formFields","setFormFields","timeOut","handleInputChange","e","persist","target","name","value","useEffect","clearTimeout","onSubmit","preventDefault","setTimeout","onChange","disabled","className","LightTheme","DarkTheme","GlobalStyle","createGlobalStyle","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.975bba6a.chunk.js","sourcesContent":["import styled,{css} from 'styled-components';\r\nimport PropTypes from \"prop-types\";\r\nconst largeStyles = ({large})=>{\r\n    if(large){\r\n        return css`\r\n            padding:15px;\r\n            font-size:2rem;\r\n            border-radius:8px;`\r\n    }else{\r\n        return css`\r\n            padding:8px;\r\n            font-size:1rem;\r\n            border-radius:4px;\r\n            `\r\n    }\r\n    \r\n}\r\nconst Button = styled.button`\r\n        color:white;\r\n        background-color:${p=>p.secondry?p.theme.secondryColor:p.theme.primaryColor};\r\n        display:block;\r\n        font-weight:bold;\r\n        ${largeStyles}\r\n        \r\n        box-shadow:none;\r\n        border:none;\r\n        width:100%;\r\n        white-space:none;\r\n        margin-top:5px;\r\n        \r\n        &:disabled{\r\n            background-color:#eee;\r\n            color: #fff;\r\n        }\r\n        &:hover{\r\n        \r\n        }\r\n        `;\r\n\r\nButton.propTypes = {\r\n    large:PropTypes.bool,\r\n    secondry:PropTypes.bool\r\n}\r\nexport {Button};","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Header} from 'components/common'\r\n\r\nconst Content = styled.main`\r\n        max-width:800px;\r\n        margin:80px auto 0 auto;\r\n        padding:0 16px;\r\n        box-sizing:border-box;\r\n        font-family:'Open Sans';\r\n\r\n        h1,h2,h3,h4,h5,h6{\r\n            font-family:'Kaushan Script';\r\n        }\r\n`;\r\n\r\nexport function PageLayout({children}){\r\n    return(\r\n        <>\r\n        <Header/>\r\n        <Content>\r\n            {children}\r\n        </Content>\r\n        </>\r\n    )\r\n}","import React, {useState,useContext} from 'react';\r\nimport {Toggle} from 'components/common'\r\nimport styled,{ThemeContext} from 'styled-components';\r\nimport {Link as LinkVirtual,useLocation} from 'react-router-dom';\r\n\r\nconst HeaderWrapper = styled.header`\r\n                height:60px;\r\n                width:100%;\r\n                box-sizing:border-box;\r\n                display:flex;\r\n                padding:0 16px;\r\n                position:fixed;\r\n                top:0;\r\n                background-image:linear-gradient(to right , ${p=>p.theme.primaryColor} , ${p=>p.theme.secondryColor});\r\n                border-bottom:3px solid ${p=>p.theme.secondryColor};\r\n`;\r\n\r\nconst Menu = styled.nav`\r\n                display:${p=>p.open ? 'block' : 'none'};\r\n                position:absolute;\r\n                font-family:'Open Sans';\r\n                box-sizing:border-box;\r\n                padding:8px;\r\n                left:0;\r\n                top:60px;\r\n                width:100%;\r\n                border-bottom:3px solid ${p => p.theme.secondaryColor};\r\n                background-color:${p=>p.theme.backgroundColor};\r\n                @media(min-width:768px){\r\n                    display:flex;\r\n                    background:none;\r\n                    top:initial;\r\n                    left:initial;\r\n                    margin:auto 0 auto auto;\r\n                    border-bottom:none;\r\n                    position: relative;\r\n                    width:initial;\r\n                }\r\n                `;\r\n//overiding styled components and react components\r\nconst MenuAlt = styled(Menu)`\r\n                border-bottom:2px solid red;\r\n                `;\r\nconst Link = ({isActive , children,...props})=>{\r\n    return(\r\n        <LinkVirtual {...props}>\r\n            {children}\r\n        </LinkVirtual>\r\n    )\r\n}\r\nconst MobileMenuIcon = styled.div`\r\n                margin:auto 0 auto auto;\r\n                width:25px;\r\n                min-width:25px;\r\n                padding:5px;\r\n                >div{\r\n                    height:3px;\r\n                    background-color:${p=>p.theme.textColor};\r\n                    margin:5px 0;\r\n                    width:100%;\r\n                }\r\n                @media(min-width:768px){\r\n                    display:none;\r\n                }`;\r\nconst StyledLink = styled(Link)`\r\n                padding:4px 8px;\r\n                display:block;\r\n                text-align:center;\r\n                box-sizing:border-box;\r\n                margin:auto 0;\r\n                text-decoration:none;\r\n                color:${p=>p.isActive?'magenta':p.theme.textColor};\r\n                font-weight:${p=>p.isActive?'bold':'normal'};\r\n                \r\n                `\r\nexport function Header(){\r\n    const {pathname} =useLocation();\r\n    const [menuOpen,setMenuOpen] =useState(false);\r\n    const {id,setTheme} = useContext(ThemeContext);\r\n        return (\r\n            <HeaderWrapper>\r\n                <MobileMenuIcon onClick={()=>setMenuOpen(s=>!s)}>\r\n                    <div/>\r\n                    <div/>\r\n                    <div/>\r\n                </MobileMenuIcon>\r\n                <Menu open={menuOpen}>\r\n                    <StyledLink to=\"/\" isActive={pathname === \"/\"}>Home</StyledLink>\r\n                    <StyledLink to=\"login\" isActive={pathname === \"/login\"}>Login</StyledLink>\r\n                    <Toggle isActive={ id === 'darkTheme' } onToggle={setTheme}/>\r\n\r\n                </Menu>\r\n\r\n            </HeaderWrapper>\r\n        )\r\n    \r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n            padding:4px 8px;\r\n            border:1px solid #ccc;\r\n            border-radius:4px;\r\n            font-size:1rem;\r\n            font-family:'Open Sans';\r\n            margin-bottom:8px;\r\n            width:100%;\r\n            box-sizing:border-box;\r\n            height:48px;\r\n            `;\r\n\r\nexport{Input};","import React ,{useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport {Input} from './input';\r\n\r\nconst PasswordInputWrapper = styled.div`\r\n            display:flex;\r\n            ~div{\r\n                margin-bottom: 8px;\r\n            }\r\n            `;\r\nconst PasswordInputStyled = styled(Input).attrs(()=>({\r\n            placeholder:'your password'\r\n}))`\r\n            border-top-right-radius:0;\r\n            border-bottom-right-radius:0;\r\n                `;\r\nconst ToggleButton =styled.div`\r\n            height:48px;\r\n            border:1px solid #ccc;\r\n            box-sizing:border-box;\r\n            font-size:0.9rem;\r\n            display:flex;\r\n            background:white;\r\n            color:black;\r\n            user-select:none;\r\n            cursor:pointer;\r\n            font-weight:bold;\r\n            border-left:none;\r\n            border-top-right-radius:4px;\r\n            border-bottom-right-radius:4px;\r\n            padding:8px;\r\n            min-width:50px;\r\n            `;\r\nexport function PasswordInput(props){\r\n    const [showPassword,setShowPassword] = useState(false);\r\n    return(\r\n        <PasswordInputWrapper>\r\n        <PasswordInputStyled {...props} type={showPassword ? 'text':'password'}/>\r\n        <ToggleButton onClick={()=>setShowPassword(s=>!s)}>\r\n            {showPassword?'show':'hide'}\r\n        </ToggleButton>\r\n        </PasswordInputWrapper>\r\n        \r\n    )\r\n}","import styled ,{keyframes} from 'styled-components';\r\n\r\nconst rotation = keyframes`\r\n            from{\r\n                transform:rotate(-360deg);\r\n            }\r\n`;\r\nconst Spinner = styled.div`\r\n            height:30px;\r\n            width:30px;\r\n            border:2px solid #f8049c;\r\n            border-radius:50%;\r\n            border-top:none;\r\n            border-right:none;\r\n            margin:16px auto;\r\n            animation:${rotation} 1s linear infinite;\r\n            `;\r\nexport {Spinner};","import styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst ToggleWrapper = styled.div`\r\n        width:50px;\r\n        min-width:50px;\r\n        height:25px;\r\n        border-radius:25px;\r\n        border:1px solid #666;\r\n        margin:auto;\r\n        display:flex;\r\n        background-image:linear-gradient(to bottom,${p=>p.theme.primaryColor},${p =>p.theme.secondryColor});\r\n\r\n        @media(min-width:768px){\r\n                    margin:auto 8px;\r\n                }\r\n        `;\r\n \r\nconst Notch = styled.div`\r\n        height:21px;\r\n        width:21px;\r\n        border:1px solid #666;\r\n        margin-top:1px;\r\n        background:white;\r\n        border-radius:50%;\r\n        transition:transform 0.1s linear;\r\n        transform: translate(${p  =>p.isActive ? '26px':'1px'});\r\n\r\n        \r\n`;\r\n\r\nexport function Toggle({isActive ,onToggle}){\r\n\r\n    return(\r\n        <ToggleWrapper onClick={onToggle}>\r\n            <Notch isActive={isActive}/>\r\n        </ToggleWrapper>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport {PageLayout} from 'components/common';\r\n\r\nexport default class home extends Component {\r\n    render() {\r\n        return (\r\n            <PageLayout>\r\n                <div>\r\n                    <h1>HOme</h1>\r\n                    <p>\r\n                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\r\n\r\n                    </p>\r\n                    <p>      \r\n                        It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\r\n\r\n\r\n                    </p>\r\n                </div>\r\n            </PageLayout>\r\n           \r\n        )\r\n    }\r\n}\r\n","import React, { useState,useEffect} from 'react'\r\nimport {PageLayout,Input,PasswordInput,Button,Spinner} from 'components/common';\r\nimport styled from 'styled-components';\r\n\r\nconst Form = styled.form`\r\n            width:100%;\r\n            max-width:400px;\r\n            background:white;\r\n            border:1px solid #eee;\r\n            padding:16px;\r\n            box-sizing:border-box;\r\n            color:black;\r\n            border-radius:4px;\r\n\r\n            .alt-text{\r\n                margin:8px 0;\r\n                text-align:center;\r\n            }\r\n\r\n            ${Button}:first-of-type{\r\n                margin-top:40px;\r\n\r\n            }\r\n            >${Input}{\r\n                margin-top:20px;\r\n            }\r\n            `\r\nexport default function Login(props){\r\n    const [loading ,setLoading] = useState(false);\r\n    const [formFields,setFormFields] = useState({username:'',password:''});\r\n    let timeOut =\"\";\r\n\r\n    function handleInputChange(e){\r\n        e.persist();\r\n        setFormFields(s=>({\r\n            ...s,\r\n            [e.target.name]:e.target.value\r\n        }));\r\n    };\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        timeOut = setTimeout(()=>{\r\n            setLoading(false);\r\n        },2000);\r\n\r\n    }\r\n    useEffect(()=>{\r\n        return()=>{\r\n            if(timeOut){\r\n                clearTimeout(timeOut);\r\n            }\r\n        }\r\n    },[])\r\n        return (\r\n            <PageLayout>\r\n                <div>\r\n                    <h1>\r\n                        login\r\n                    </h1>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        {loading ? <Spinner/>:\r\n                            <>\r\n                                <span>Login here if you have account</span>\r\n                                <Input \r\n                                    value={formFields.username}\r\n                                    onChange={handleInputChange}\r\n                                    name=\"username\" \r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"/>\r\n                                <PasswordInput\r\n                                    value={formFields.password}\r\n                                    onChange={handleInputChange}\r\n                                    name=\"password\" />\r\n                            </>\r\n                        }    \r\n                        <Button large type=\"submit\" disabled={loading}>\r\n                            {loading ? 'Loading...':'Login'}\r\n                        </Button>\r\n                        {!loading && \r\n                        <>\r\n                        <div className=\"alt-text\">\r\n                            OR\r\n                        </div>\r\n                        <Button secondry type=\"button\">\r\n                            Register\r\n                        </Button>\r\n                        </>}\r\n                    </Form>\r\n                    \r\n                </div>\r\n            </PageLayout>\r\n        )\r\n    \r\n}\r\n","const LightTheme = {\r\n    id:'lightTheme',\r\n    primaryColor:'#f8049c',\r\n    secondryColor:'#fdd54f',\r\n    backgroundColor:'white',\r\n    textColor:'black'\r\n  };\r\n\r\n  export default LightTheme","const DarkTheme = {\r\n    id:'darkTheme',\r\n    primaryColor:'black',\r\n    secondryColor:'midnightblue',\r\n    backgroundColor:'black',\r\n    textColor:'white'\r\n  };\r\n\r\n  export default DarkTheme","import React ,{useState} from 'react';\nimport {Button} from 'components/common';\nimport {createGlobalStyle, ThemeProvider} from 'styled-components';\nimport {BrowserRouter,Route,Switch} from 'react-router-dom';\nimport Home from 'components/pages/home';\nimport Login from 'components/pages/login';\nimport LightTheme from 'themes/light';\nimport DarkTheme from 'themes/dark';\n\nconst GlobalStyle = createGlobalStyle`\n        body{\n          background-color:${p=>p.theme.backgroundColor};\n          min-height:100vh;\n          margin:0;\n          color:${p=>p.theme.textColor};\n          font-family:'Kaushan Script'\n        }`;\n  \n\nfunction App() {\n  const [theme,setTheme] = useState(LightTheme);\n  return (\n    <ThemeProvider theme={{...theme,setTheme :()=>{\n      setTheme(s=>s.id === 'lightTheme'?DarkTheme : LightTheme);\n    }}}>\n      <GlobalStyle/>\n      <BrowserRouter>\n        <Switch>\n\n          <Route exact path=\"/\" >\n            <Home/>\n          </Route>\n          <Route path=\"/login\" >\n            <Login/>\n          </Route>\n        </Switch>\n\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}